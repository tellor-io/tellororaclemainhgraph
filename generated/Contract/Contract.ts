// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class NewReport extends ethereum.Event {
  get params(): NewReport__Params {
    return new NewReport__Params(this);
  }
}

export class NewReport__Params {
  _event: NewReport;

  constructor(event: NewReport) {
    this._event = event;
  }

  get _queryId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get _time(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _value(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get _nonce(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _queryData(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }

  get _reporter(): Address {
    return this._event.parameters[5].value.toAddress();
  }
}

export class NewStakeAmount extends ethereum.Event {
  get params(): NewStakeAmount__Params {
    return new NewStakeAmount__Params(this);
  }
}

export class NewStakeAmount__Params {
  _event: NewStakeAmount;

  constructor(event: NewStakeAmount) {
    this._event = event;
  }

  get _newStakeAmount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class NewStaker extends ethereum.Event {
  get params(): NewStaker__Params {
    return new NewStaker__Params(this);
  }
}

export class NewStaker__Params {
  _event: NewStaker;

  constructor(event: NewStaker) {
    this._event = event;
  }

  get _staker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ReporterSlashed extends ethereum.Event {
  get params(): ReporterSlashed__Params {
    return new ReporterSlashed__Params(this);
  }
}

export class ReporterSlashed__Params {
  _event: ReporterSlashed;

  constructor(event: ReporterSlashed) {
    this._event = event;
  }

  get _reporter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _recipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _slashAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class StakeWithdrawRequested extends ethereum.Event {
  get params(): StakeWithdrawRequested__Params {
    return new StakeWithdrawRequested__Params(this);
  }
}

export class StakeWithdrawRequested__Params {
  _event: StakeWithdrawRequested;

  constructor(event: StakeWithdrawRequested) {
    this._event = event;
  }

  get _staker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class StakeWithdrawn extends ethereum.Event {
  get params(): StakeWithdrawn__Params {
    return new StakeWithdrawn__Params(this);
  }
}

export class StakeWithdrawn__Params {
  _event: StakeWithdrawn;

  constructor(event: StakeWithdrawn) {
    this._event = event;
  }

  get _staker(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ValueRemoved extends ethereum.Event {
  get params(): ValueRemoved__Params {
    return new ValueRemoved__Params(this);
  }
}

export class ValueRemoved__Params {
  _event: ValueRemoved;

  constructor(event: ValueRemoved) {
    this._event = event;
  }

  get _queryId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get _timestamp(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Contract__getDataBeforeResult {
  value0: boolean;
  value1: Bytes;
  value2: BigInt;

  constructor(value0: boolean, value1: Bytes, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBytes(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  get_ifRetrieve(): boolean {
    return this.value0;
  }

  get_value(): Bytes {
    return this.value1;
  }

  get_timestampRetrieved(): BigInt {
    return this.value2;
  }
}

export class Contract__getIndexForDataBeforeResult {
  value0: boolean;
  value1: BigInt;

  constructor(value0: boolean, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  get_found(): boolean {
    return this.value0;
  }

  get_index(): BigInt {
    return this.value1;
  }
}

export class Contract__getReportDetailsResult {
  value0: Address;
  value1: boolean;

  constructor(value0: Address, value1: boolean) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    return map;
  }

  getValue0(): Address {
    return this.value0;
  }

  getValue1(): boolean {
    return this.value1;
  }
}

export class Contract__getStakerInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: boolean;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromBoolean(this.value8));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }

  getValue2(): BigInt {
    return this.value2;
  }

  getValue3(): BigInt {
    return this.value3;
  }

  getValue4(): BigInt {
    return this.value4;
  }

  getValue5(): BigInt {
    return this.value5;
  }

  getValue6(): BigInt {
    return this.value6;
  }

  getValue7(): BigInt {
    return this.value7;
  }

  getValue8(): boolean {
    return this.value8;
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  accumulatedRewardPerShare(): BigInt {
    let result = super.call(
      "accumulatedRewardPerShare",
      "accumulatedRewardPerShare():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_accumulatedRewardPerShare(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "accumulatedRewardPerShare",
      "accumulatedRewardPerShare():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBlockNumberByTimestamp(_queryId: Bytes, _timestamp: BigInt): BigInt {
    let result = super.call(
      "getBlockNumberByTimestamp",
      "getBlockNumberByTimestamp(bytes32,uint256):(uint256)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );

    return result[0].toBigInt();
  }

  try_getBlockNumberByTimestamp(
    _queryId: Bytes,
    _timestamp: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBlockNumberByTimestamp",
      "getBlockNumberByTimestamp(bytes32,uint256):(uint256)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCurrentValue(_queryId: Bytes): Bytes {
    let result = super.call(
      "getCurrentValue",
      "getCurrentValue(bytes32):(bytes)",
      [ethereum.Value.fromFixedBytes(_queryId)]
    );

    return result[0].toBytes();
  }

  try_getCurrentValue(_queryId: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getCurrentValue",
      "getCurrentValue(bytes32):(bytes)",
      [ethereum.Value.fromFixedBytes(_queryId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getDataBefore(
    _queryId: Bytes,
    _timestamp: BigInt
  ): Contract__getDataBeforeResult {
    let result = super.call(
      "getDataBefore",
      "getDataBefore(bytes32,uint256):(bool,bytes,uint256)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );

    return new Contract__getDataBeforeResult(
      result[0].toBoolean(),
      result[1].toBytes(),
      result[2].toBigInt()
    );
  }

  try_getDataBefore(
    _queryId: Bytes,
    _timestamp: BigInt
  ): ethereum.CallResult<Contract__getDataBeforeResult> {
    let result = super.tryCall(
      "getDataBefore",
      "getDataBefore(bytes32,uint256):(bool,bytes,uint256)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__getDataBeforeResult(
        value[0].toBoolean(),
        value[1].toBytes(),
        value[2].toBigInt()
      )
    );
  }

  getGovernanceAddress(): Address {
    let result = super.call(
      "getGovernanceAddress",
      "getGovernanceAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getGovernanceAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getGovernanceAddress",
      "getGovernanceAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getIndexForDataBefore(
    _queryId: Bytes,
    _timestamp: BigInt
  ): Contract__getIndexForDataBeforeResult {
    let result = super.call(
      "getIndexForDataBefore",
      "getIndexForDataBefore(bytes32,uint256):(bool,uint256)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );

    return new Contract__getIndexForDataBeforeResult(
      result[0].toBoolean(),
      result[1].toBigInt()
    );
  }

  try_getIndexForDataBefore(
    _queryId: Bytes,
    _timestamp: BigInt
  ): ethereum.CallResult<Contract__getIndexForDataBeforeResult> {
    let result = super.tryCall(
      "getIndexForDataBefore",
      "getIndexForDataBefore(bytes32,uint256):(bool,uint256)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__getIndexForDataBeforeResult(
        value[0].toBoolean(),
        value[1].toBigInt()
      )
    );
  }

  getNewValueCountbyQueryId(_queryId: Bytes): BigInt {
    let result = super.call(
      "getNewValueCountbyQueryId",
      "getNewValueCountbyQueryId(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(_queryId)]
    );

    return result[0].toBigInt();
  }

  try_getNewValueCountbyQueryId(_queryId: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNewValueCountbyQueryId",
      "getNewValueCountbyQueryId(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(_queryId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPendingRewardByStaker(_stakerAddress: Address): BigInt {
    let result = super.call(
      "getPendingRewardByStaker",
      "getPendingRewardByStaker(address):(uint256)",
      [ethereum.Value.fromAddress(_stakerAddress)]
    );

    return result[0].toBigInt();
  }

  try_getPendingRewardByStaker(
    _stakerAddress: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPendingRewardByStaker",
      "getPendingRewardByStaker(address):(uint256)",
      [ethereum.Value.fromAddress(_stakerAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRealStakingRewardsBalance(): BigInt {
    let result = super.call(
      "getRealStakingRewardsBalance",
      "getRealStakingRewardsBalance():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getRealStakingRewardsBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRealStakingRewardsBalance",
      "getRealStakingRewardsBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getReportDetails(
    _queryId: Bytes,
    _timestamp: BigInt
  ): Contract__getReportDetailsResult {
    let result = super.call(
      "getReportDetails",
      "getReportDetails(bytes32,uint256):(address,bool)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );

    return new Contract__getReportDetailsResult(
      result[0].toAddress(),
      result[1].toBoolean()
    );
  }

  try_getReportDetails(
    _queryId: Bytes,
    _timestamp: BigInt
  ): ethereum.CallResult<Contract__getReportDetailsResult> {
    let result = super.tryCall(
      "getReportDetails",
      "getReportDetails(bytes32,uint256):(address,bool)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__getReportDetailsResult(
        value[0].toAddress(),
        value[1].toBoolean()
      )
    );
  }

  getReporterByTimestamp(_queryId: Bytes, _timestamp: BigInt): Address {
    let result = super.call(
      "getReporterByTimestamp",
      "getReporterByTimestamp(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );

    return result[0].toAddress();
  }

  try_getReporterByTimestamp(
    _queryId: Bytes,
    _timestamp: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getReporterByTimestamp",
      "getReporterByTimestamp(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getReporterLastTimestamp(_reporter: Address): BigInt {
    let result = super.call(
      "getReporterLastTimestamp",
      "getReporterLastTimestamp(address):(uint256)",
      [ethereum.Value.fromAddress(_reporter)]
    );

    return result[0].toBigInt();
  }

  try_getReporterLastTimestamp(
    _reporter: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getReporterLastTimestamp",
      "getReporterLastTimestamp(address):(uint256)",
      [ethereum.Value.fromAddress(_reporter)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getReportingLock(): BigInt {
    let result = super.call(
      "getReportingLock",
      "getReportingLock():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getReportingLock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getReportingLock",
      "getReportingLock():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getReportsSubmittedByAddress(_reporter: Address): BigInt {
    let result = super.call(
      "getReportsSubmittedByAddress",
      "getReportsSubmittedByAddress(address):(uint256)",
      [ethereum.Value.fromAddress(_reporter)]
    );

    return result[0].toBigInt();
  }

  try_getReportsSubmittedByAddress(
    _reporter: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getReportsSubmittedByAddress",
      "getReportsSubmittedByAddress(address):(uint256)",
      [ethereum.Value.fromAddress(_reporter)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getReportsSubmittedByAddressAndQueryId(
    _reporter: Address,
    _queryId: Bytes
  ): BigInt {
    let result = super.call(
      "getReportsSubmittedByAddressAndQueryId",
      "getReportsSubmittedByAddressAndQueryId(address,bytes32):(uint256)",
      [
        ethereum.Value.fromAddress(_reporter),
        ethereum.Value.fromFixedBytes(_queryId)
      ]
    );

    return result[0].toBigInt();
  }

  try_getReportsSubmittedByAddressAndQueryId(
    _reporter: Address,
    _queryId: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getReportsSubmittedByAddressAndQueryId",
      "getReportsSubmittedByAddressAndQueryId(address,bytes32):(uint256)",
      [
        ethereum.Value.fromAddress(_reporter),
        ethereum.Value.fromFixedBytes(_queryId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStakeAmount(): BigInt {
    let result = super.call("getStakeAmount", "getStakeAmount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getStakeAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getStakeAmount",
      "getStakeAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStakerInfo(_stakerAddress: Address): Contract__getStakerInfoResult {
    let result = super.call(
      "getStakerInfo",
      "getStakerInfo(address):(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool)",
      [ethereum.Value.fromAddress(_stakerAddress)]
    );

    return new Contract__getStakerInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBoolean()
    );
  }

  try_getStakerInfo(
    _stakerAddress: Address
  ): ethereum.CallResult<Contract__getStakerInfoResult> {
    let result = super.tryCall(
      "getStakerInfo",
      "getStakerInfo(address):(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool)",
      [ethereum.Value.fromAddress(_stakerAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__getStakerInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBoolean()
      )
    );
  }

  getTimeOfLastNewValue(): BigInt {
    let result = super.call(
      "getTimeOfLastNewValue",
      "getTimeOfLastNewValue():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTimeOfLastNewValue(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTimeOfLastNewValue",
      "getTimeOfLastNewValue():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTimestampIndexByTimestamp(_queryId: Bytes, _timestamp: BigInt): BigInt {
    let result = super.call(
      "getTimestampIndexByTimestamp",
      "getTimestampIndexByTimestamp(bytes32,uint256):(uint256)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );

    return result[0].toBigInt();
  }

  try_getTimestampIndexByTimestamp(
    _queryId: Bytes,
    _timestamp: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTimestampIndexByTimestamp",
      "getTimestampIndexByTimestamp(bytes32,uint256):(uint256)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTimestampbyQueryIdandIndex(_queryId: Bytes, _index: BigInt): BigInt {
    let result = super.call(
      "getTimestampbyQueryIdandIndex",
      "getTimestampbyQueryIdandIndex(bytes32,uint256):(uint256)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_index)
      ]
    );

    return result[0].toBigInt();
  }

  try_getTimestampbyQueryIdandIndex(
    _queryId: Bytes,
    _index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTimestampbyQueryIdandIndex",
      "getTimestampbyQueryIdandIndex(bytes32,uint256):(uint256)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTokenAddress(): Address {
    let result = super.call(
      "getTokenAddress",
      "getTokenAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getTokenAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getTokenAddress",
      "getTokenAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getTotalStakeAmount(): BigInt {
    let result = super.call(
      "getTotalStakeAmount",
      "getTotalStakeAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTotalStakeAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalStakeAmount",
      "getTotalStakeAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalStakers(): BigInt {
    let result = super.call(
      "getTotalStakers",
      "getTotalStakers():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTotalStakers(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalStakers",
      "getTotalStakers():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalTimeBasedRewardsBalance(): BigInt {
    let result = super.call(
      "getTotalTimeBasedRewardsBalance",
      "getTotalTimeBasedRewardsBalance():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTotalTimeBasedRewardsBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalTimeBasedRewardsBalance",
      "getTotalTimeBasedRewardsBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  governance(): Address {
    let result = super.call("governance", "governance():(address)", []);

    return result[0].toAddress();
  }

  try_governance(): ethereum.CallResult<Address> {
    let result = super.tryCall("governance", "governance():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isInDispute(_queryId: Bytes, _timestamp: BigInt): boolean {
    let result = super.call(
      "isInDispute",
      "isInDispute(bytes32,uint256):(bool)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );

    return result[0].toBoolean();
  }

  try_isInDispute(
    _queryId: Bytes,
    _timestamp: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isInDispute",
      "isInDispute(bytes32,uint256):(bool)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  minimumStakeAmount(): BigInt {
    let result = super.call(
      "minimumStakeAmount",
      "minimumStakeAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_minimumStakeAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minimumStakeAmount",
      "minimumStakeAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  reportingLock(): BigInt {
    let result = super.call("reportingLock", "reportingLock():(uint256)", []);

    return result[0].toBigInt();
  }

  try_reportingLock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "reportingLock",
      "reportingLock():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  retrieveData(_queryId: Bytes, _timestamp: BigInt): Bytes {
    let result = super.call(
      "retrieveData",
      "retrieveData(bytes32,uint256):(bytes)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );

    return result[0].toBytes();
  }

  try_retrieveData(
    _queryId: Bytes,
    _timestamp: BigInt
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "retrieveData",
      "retrieveData(bytes32,uint256):(bytes)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  rewardRate(): BigInt {
    let result = super.call("rewardRate", "rewardRate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_rewardRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("rewardRate", "rewardRate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  slashReporter(_reporter: Address, _recipient: Address): BigInt {
    let result = super.call(
      "slashReporter",
      "slashReporter(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_reporter),
        ethereum.Value.fromAddress(_recipient)
      ]
    );

    return result[0].toBigInt();
  }

  try_slashReporter(
    _reporter: Address,
    _recipient: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "slashReporter",
      "slashReporter(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_reporter),
        ethereum.Value.fromAddress(_recipient)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakeAmount(): BigInt {
    let result = super.call("stakeAmount", "stakeAmount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_stakeAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("stakeAmount", "stakeAmount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakeAmountDollarTarget(): BigInt {
    let result = super.call(
      "stakeAmountDollarTarget",
      "stakeAmountDollarTarget():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_stakeAmountDollarTarget(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stakeAmountDollarTarget",
      "stakeAmountDollarTarget():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakingRewardsBalance(): BigInt {
    let result = super.call(
      "stakingRewardsBalance",
      "stakingRewardsBalance():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_stakingRewardsBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stakingRewardsBalance",
      "stakingRewardsBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakingTokenPriceQueryId(): Bytes {
    let result = super.call(
      "stakingTokenPriceQueryId",
      "stakingTokenPriceQueryId():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_stakingTokenPriceQueryId(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "stakingTokenPriceQueryId",
      "stakingTokenPriceQueryId():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  timeBasedReward(): BigInt {
    let result = super.call(
      "timeBasedReward",
      "timeBasedReward():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_timeBasedReward(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "timeBasedReward",
      "timeBasedReward():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  timeOfLastAllocation(): BigInt {
    let result = super.call(
      "timeOfLastAllocation",
      "timeOfLastAllocation():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_timeOfLastAllocation(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "timeOfLastAllocation",
      "timeOfLastAllocation():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  timeOfLastNewValue(): BigInt {
    let result = super.call(
      "timeOfLastNewValue",
      "timeOfLastNewValue():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_timeOfLastNewValue(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "timeOfLastNewValue",
      "timeOfLastNewValue():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalRewardDebt(): BigInt {
    let result = super.call(
      "totalRewardDebt",
      "totalRewardDebt():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalRewardDebt(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalRewardDebt",
      "totalRewardDebt():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalStakeAmount(): BigInt {
    let result = super.call(
      "totalStakeAmount",
      "totalStakeAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalStakeAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalStakeAmount",
      "totalStakeAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalStakers(): BigInt {
    let result = super.call("totalStakers", "totalStakers():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalStakers(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalStakers", "totalStakers():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  verify(): BigInt {
    let result = super.call("verify", "verify():(uint256)", []);

    return result[0].toBigInt();
  }

  try_verify(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("verify", "verify():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _reportingLock(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _stakeAmountDollarTarget(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _stakingTokenPrice(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _minimumStakeAmount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _stakingTokenPriceQueryId(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddStakingRewardsCall extends ethereum.Call {
  get inputs(): AddStakingRewardsCall__Inputs {
    return new AddStakingRewardsCall__Inputs(this);
  }

  get outputs(): AddStakingRewardsCall__Outputs {
    return new AddStakingRewardsCall__Outputs(this);
  }
}

export class AddStakingRewardsCall__Inputs {
  _call: AddStakingRewardsCall;

  constructor(call: AddStakingRewardsCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class AddStakingRewardsCall__Outputs {
  _call: AddStakingRewardsCall;

  constructor(call: AddStakingRewardsCall) {
    this._call = call;
  }
}

export class DepositStakeCall extends ethereum.Call {
  get inputs(): DepositStakeCall__Inputs {
    return new DepositStakeCall__Inputs(this);
  }

  get outputs(): DepositStakeCall__Outputs {
    return new DepositStakeCall__Outputs(this);
  }
}

export class DepositStakeCall__Inputs {
  _call: DepositStakeCall;

  constructor(call: DepositStakeCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositStakeCall__Outputs {
  _call: DepositStakeCall;

  constructor(call: DepositStakeCall) {
    this._call = call;
  }
}

export class GetPendingRewardByStakerCall extends ethereum.Call {
  get inputs(): GetPendingRewardByStakerCall__Inputs {
    return new GetPendingRewardByStakerCall__Inputs(this);
  }

  get outputs(): GetPendingRewardByStakerCall__Outputs {
    return new GetPendingRewardByStakerCall__Outputs(this);
  }
}

export class GetPendingRewardByStakerCall__Inputs {
  _call: GetPendingRewardByStakerCall;

  constructor(call: GetPendingRewardByStakerCall) {
    this._call = call;
  }

  get _stakerAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class GetPendingRewardByStakerCall__Outputs {
  _call: GetPendingRewardByStakerCall;

  constructor(call: GetPendingRewardByStakerCall) {
    this._call = call;
  }

  get _pendingReward(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class InitCall extends ethereum.Call {
  get inputs(): InitCall__Inputs {
    return new InitCall__Inputs(this);
  }

  get outputs(): InitCall__Outputs {
    return new InitCall__Outputs(this);
  }
}

export class InitCall__Inputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }

  get _governanceAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitCall__Outputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }
}

export class RemoveValueCall extends ethereum.Call {
  get inputs(): RemoveValueCall__Inputs {
    return new RemoveValueCall__Inputs(this);
  }

  get outputs(): RemoveValueCall__Outputs {
    return new RemoveValueCall__Outputs(this);
  }
}

export class RemoveValueCall__Inputs {
  _call: RemoveValueCall;

  constructor(call: RemoveValueCall) {
    this._call = call;
  }

  get _queryId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _timestamp(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RemoveValueCall__Outputs {
  _call: RemoveValueCall;

  constructor(call: RemoveValueCall) {
    this._call = call;
  }
}

export class RequestStakingWithdrawCall extends ethereum.Call {
  get inputs(): RequestStakingWithdrawCall__Inputs {
    return new RequestStakingWithdrawCall__Inputs(this);
  }

  get outputs(): RequestStakingWithdrawCall__Outputs {
    return new RequestStakingWithdrawCall__Outputs(this);
  }
}

export class RequestStakingWithdrawCall__Inputs {
  _call: RequestStakingWithdrawCall;

  constructor(call: RequestStakingWithdrawCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RequestStakingWithdrawCall__Outputs {
  _call: RequestStakingWithdrawCall;

  constructor(call: RequestStakingWithdrawCall) {
    this._call = call;
  }
}

export class SlashReporterCall extends ethereum.Call {
  get inputs(): SlashReporterCall__Inputs {
    return new SlashReporterCall__Inputs(this);
  }

  get outputs(): SlashReporterCall__Outputs {
    return new SlashReporterCall__Outputs(this);
  }
}

export class SlashReporterCall__Inputs {
  _call: SlashReporterCall;

  constructor(call: SlashReporterCall) {
    this._call = call;
  }

  get _reporter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SlashReporterCall__Outputs {
  _call: SlashReporterCall;

  constructor(call: SlashReporterCall) {
    this._call = call;
  }

  get _slashAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SubmitValueCall extends ethereum.Call {
  get inputs(): SubmitValueCall__Inputs {
    return new SubmitValueCall__Inputs(this);
  }

  get outputs(): SubmitValueCall__Outputs {
    return new SubmitValueCall__Outputs(this);
  }
}

export class SubmitValueCall__Inputs {
  _call: SubmitValueCall;

  constructor(call: SubmitValueCall) {
    this._call = call;
  }

  get _queryId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _value(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _nonce(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _queryData(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SubmitValueCall__Outputs {
  _call: SubmitValueCall;

  constructor(call: SubmitValueCall) {
    this._call = call;
  }
}

export class UpdateStakeAmountCall extends ethereum.Call {
  get inputs(): UpdateStakeAmountCall__Inputs {
    return new UpdateStakeAmountCall__Inputs(this);
  }

  get outputs(): UpdateStakeAmountCall__Outputs {
    return new UpdateStakeAmountCall__Outputs(this);
  }
}

export class UpdateStakeAmountCall__Inputs {
  _call: UpdateStakeAmountCall;

  constructor(call: UpdateStakeAmountCall) {
    this._call = call;
  }
}

export class UpdateStakeAmountCall__Outputs {
  _call: UpdateStakeAmountCall;

  constructor(call: UpdateStakeAmountCall) {
    this._call = call;
  }
}

export class WithdrawStakeCall extends ethereum.Call {
  get inputs(): WithdrawStakeCall__Inputs {
    return new WithdrawStakeCall__Inputs(this);
  }

  get outputs(): WithdrawStakeCall__Outputs {
    return new WithdrawStakeCall__Outputs(this);
  }
}

export class WithdrawStakeCall__Inputs {
  _call: WithdrawStakeCall;

  constructor(call: WithdrawStakeCall) {
    this._call = call;
  }
}

export class WithdrawStakeCall__Outputs {
  _call: WithdrawStakeCall;

  constructor(call: WithdrawStakeCall) {
    this._call = call;
  }
}
